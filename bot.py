import os, json, requests, websocket, threading, time

def on_ready(data):
    print(f"[-]: Connected to Discord interval {interval}s")
    print(f"[-]: Username: {data['d']['user']['username']}")

def on_interaction(data):
    if data["d"]["data"]["name"] == "generate":
        prompt = data["d"]["data"]["options"][0]["value"]
        payload = {
            "type": 4,
            "data": {
                "embeds": [
                    {
                        "title": "Generating AI Image...",
                        "description": "Please wait while the AI image is generated.",
                        "fields": [
                            {
                                "name": "Text Prompt",
                                "value": prompt,
                                "inline": True
                            },
                            {
                                "name": "Generated By",
                                "value": f"{data['d']['member']['user']['username']}#{data['d']['member']['user']['discriminator']}",
                                "inline": True
                            }
                        ],
                        "color": 0xa686f0,
                        "thumbnail": {
                            "url": "https://cdn.discordapp.com/attachments/1041398908875722832/1042112773917782066/x_logo_transparant.png"
                        },
                        "footer": {
                            "text": "Generated by XenoAI - https://xeno-ai.space"
                        }
                    }
                ]
            }
        }
        requests.post(f"https://discord.com/api/v10/interactions/{data['d']['id']}/{data['d']['token']}/callback", json=payload)
        imgs = []
        auth = {
            "Authorization": os.getenv("AI_TOKEN")
        }
        try:
            f = requests.post("https://api.xeno-ai.space/v3/images", data={"prompt": prompt}, headers=auth).json()
            payload = {
                "embeds": [
                    {
                        "title": "AI Image Generated",
                        "description": "The AI image has been generated.",
                        "fields": [
                            {
                                "name": "Text Prompt",
                                "value": prompt,
                                "inline": True
                            },
                            {
                                "name": "Generated By",
                                "value": f"{data['d']['member']['user']['username']}#{data['d']['member']['user']['discriminator']}",
                                "inline": True
                            }
                        ],
                        "color": 0xa686f0,
                        "footer": {
                            "text": "Generated by XenoAI - https://xeno-ai.space"
                        },
                        "image": {
                            "url": f["output"]
                        }
                    }
                ],
                "components": [
                    {
                        "type": 1,
                        "components": [
                            {
                                "type": 2,
                                "label": "D1",
                                "style": 5,
                                "url": f["images"][0]
                            },
                            {
                                "type": 2,
                                "label": "D2",
                                "style": 5,
                                "url": f["images"][1]
                            },
                            {
                                "type": 2,
                                "label": "D3",
                                "style": 5,
                                "url": f["images"][2]
                            },
                            {
                                "type": 2,
                                "label": "D4",
                                "style": 5,
                                "url": f["images"][3]
                            }
                        ]
                    }
                ]
            }
            return requests.post(f"https://discord.com/api/v10/webhooks/{os.getenv('DISCORD_CLIENT_ID')}/{data['d']['token']}", json=payload)
        except:
            return requests.post(f"https://discord.com/api/v10/webhooks/{os.getenv('DISCORD_CLIENT_ID')}/{data['d']['token']}", json={"content": "An error occurred while generating the AI image."})

def send_heartbeat():
    while True:
        ws.send(json.dumps({"op": 1, "d": None}))
        time.sleep(interval)

def send_identify():
    ws.send(json.dumps({
        "op": 2,
        "d": {
            "token": os.getenv("DISCORD_TOKEN"),
            "intents": 513,
            "properties": {
                "os": "linux",
                "browser": "XenoAI",
                "device": "XenoAI"
            }
        }
    }))

def register_commands():
    payload = {
        "name": "generate",
        "type": 1,
        "description": "Generated an AI image from a text prompt.",
        "options": [
            {
                "name": "text",
                "description": "The text prompt to generate the AI image from.",
                "type": 3,
                "required": True
            }
        ]
    }
    session.post(f"https://discord.com/api/applications/{os.getenv('DISCORD_CLIENT_ID')}/commands", json=payload)

session = requests.Session()
session.headers.update({
    "Authorization": f"Bot {os.getenv('DISCORD_TOKEN')}"
})
ws = websocket.create_connection("wss://gateway.discord.gg/?v=9&encoding=json")
interval = json.loads(ws.recv())["d"]["heartbeat_interval"] / 1000
threading.Thread(target=send_heartbeat).start()
threading.Thread(target=register_commands).start()
send_identify()
while True:
    data = json.loads(ws.recv())
    if data:
        if data["t"] == "READY":
            threading.Thread(target=on_ready, args=(data,)).start()
        if data["t"] == "INTERACTION_CREATE":
            threading.Thread(target=on_interaction, args=(data,)).start()
                